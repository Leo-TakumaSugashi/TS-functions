classdef Sugashi_GUI_support
   properties
      Name = mfilename('fullpath');
      SegEditorDefaultType(1,:) char {mustBeMember(SegEditorDefaultType,...
          {'with Volume','Slice only'})} = 'with Volume' 
      Cluster =  parcluster;
      GPUDevice = GetGPUDevice
      FontSize = 9;
      RGBList = GetAllColorAsRGB
      mapnum(1,1) {mustBeNumeric} = 256
      Editor = 'L.T.S.'
      Value
      UserData
   end
   methods
       function obj = set.FontSize(obj,FSiz)
           if ~isscalar(FSiz)
               error('Input Fontsize is NOT Scalar.')
           else
               obj.FontSize = FSiz;
           end             
       end
       
       %% Window Button Down and Up Function test GUI
       function fgh = WindowButton_testGUI(obj)
           fgh = uifigure(...
               'Posi',[0 0 500 280],...
               'Name','test GUI : WindowButton Up & Down',...
               'WindowButtonDownFcn',@WindowButtonDownFcn,...
               'WindowButtonUpFcn',@WindowButtonUpFcn,...
               'WindowKeyPressFcn',@WindowKeyPressFcn,...
               'WindowKeyReleaseFcn',@WindowKeyReleaseFcn,...
               'CloseRequestFcn',@CloseRequest);
           centerfig(fgh)
           im = load('topo.mat');
           axh = axes(fgh);
           imagesc(axh,im.topo);
           set(axh,'YDir','normal')
           colormap(axh,im.topomap1)
           colorbar(axh)
           axis(axh,'image')
           function WindowButtonDownFcn(~,~)
               fprintf(1,'Fuck off too much task....')
               for n = 0:100
                   pause(.01)
                   fprintf(1,'\b\b\b%3d',100-n)
               end
               fprintf('\n')
           end
           function WindowButtonUpFcn(dummy1,dummy2)
               clc
               fprintf('This is Window Button Up Fcn')
               dummy1.Position
               dummy2.EventName
%                dummy1 figure
%                dummy2 : 
%                       WindowMouseData のプロパティ:
% 
%                            Source: [1�?1 Figure]
%                         EventName: 'WindowMouseRelease'
               
               
           end
           function WindowKeyPressFcn(a,b)
               clc
               disp('__@WindowKeyPressFcn___')
               a.Name % a is figure hundle
               b.Character % b is Character info.
           end
           function WindowKeyReleaseFcn(a,b)
               disp('---@WindowKeyReleaseFcn---')
               a.Name % a is figure hundle
               b.Character % b is Character info.
           end
           function CloseRequest(~,~)
               if isempty(gcbf)
                   if length(dbstack) == 1
                       warning(message('MATLAB:closereq:ObsoleteUsage'));
                   end
                   close('force');
               else
                   fprintf(['#############\n   Supply For All.' obj.Editor ' \n' obj.Name '\n\n'])
                   delete(gcbf);
               end          
           end
       end

              
       %% Create MIP(Projection Menu
        function [uiph,uich] = AddMIPPanel(obj,ParentH)
            % [uiph,uich] = AddMIPPanel(obj,ParentH)
            % Add Projection Menu in your GUI.
            % * "Apply" button has all of children handle in UserData.
            % #1 Projection Type
            %     Style : popup
            %     {'max','average','min','Median','SD','RGB'} as default.
            % #2 Dimmention of Projection to.
            %     Style : popup
            %     {'1','2','3','4','5'} as default
            % #3 Input How Number of Slice(Time,or any Dim. Matrix)
            %     Style : edit
            %     {'1'} as default
            % #4 "Apply" button
            %     Style : pushbutton
            % #5-7 text handle

            MIPposition = [0 0.6 0.5 0.4];
            Children(1).Posi = [.01 .1 .2 .4];
            Children(2).Posi = [.22 .1 .2 .4];
            Children(3).Posi = [.45 .01 .2 .45];
            Children(4).Posi = [.7 .1 .25 .8];
            Children(5).Posi = [  0 .51 .2 .4];
            Children(6).Posi = [.22 .51 .2 .4];
            Children(7).Posi = [.45 .51 .2 .4];
            try
                ParentColor = ParentH.Color;
            catch err
                ParentColor = ParentH.BackgroundColor;
            end
            uiph = uipanel(ParentH,'Position',MIPposition,'Title','Projection Menu',...
                'ForegroundColor',[1 1 1]/6,'BackgroundColor',ParentColor,'FontSize',11);
            uich(5) = uicontrol(uiph,'Unit','Normalized','position',Children(5).Posi,'String','Type');
            uich(6) = uicontrol(uiph,'Unit','Normalized','position',Children(6).Posi,'String','Dim.');
            uich(7) = uicontrol(uiph,'Unit','Normalized','position',Children(7).Posi,'String','Num.');
            set(uich(5:7),'style','text','ForegroundColor',[1 1 1]/10,'BackgroundColor',ParentColor)

            % MIP Type {'max','average','min','Median','SD','RGB'} %%
            uich(1) = uicontrol(uiph,'Unit','Normalized','position',Children(1).Posi,...
                'String',{'max','average','min','Median','SD','RGB'},'Style','popup');
            uich(2) = uicontrol(uiph,'Unit','Normalized','position',Children(2).Posi,...
                'String',{'1','2','3','4','5'},'Style','popup','value',3,...
                'UserData',3); %% it will be used for Pre-Dimmention Value
            uich(3) = uicontrol(uiph,'Unit','Normalized','position',Children(3).Posi,...
                'String','1','Style','edit');
            uich(4) = uicontrol(uiph,'Unit','Normalized','position',Children(4).Posi,...
                'String','Apply','Callback','disp(''Please setup callback'')',...
                'ForegroundColor',[1 1 1]/10,'BackgroundColor',ParentColor/1.1);
            set(uich(4),'userdata',uich)
        end
        function [slh,txh] = AddSlider(~,ParentH)
            slh = uicontrol(ParentH,...
                'Style','Slider',...
                'Unit','Pixels',...
                'Position',[0 0 500 20]);
            txh = uicontrol(ParentH,...
                'Style','Text',...
                'String','SliderText',...
                'Units','Pixels',...
                'Position',[500 0 50 20]);
            slh.Units = 'Normalized';
            txh.Units = 'Normalized';            
        end
        %% Colormap  Editor
        function varargout = SpectrumColormapEditor(obj,varargin)
           %global fgh ApplyColorType Mapsize MAPs xdata ydata imh uih
           fgh = figure('Name','Spectrum Color Map Editor (GUI)',...
               'WindowButtonDownFcn',@WindowButtonFcn,...
               'WindowButtonUpFcn',@WindowButtonFcn,...
               'Menubar','none',...
               'toolbar','none',...
               'Resize','off',...
               'Colormap',[0 0 0]);
           axh = axes(fgh,...
               'Position',[0.05 0.2 0.9 0.68],...
               'FontSize',obj.FontSize,...
               'ButtonDownFcn','disp(''\'')');
           ApplyColorType = 'default';
           if nargin==2
               ApplyColorType = varargin{1};
           end
           
           Mapsize = 256;
           Gamma = 1;
           [MAPs,xdata] = obj.create_MAPs(Mapsize,Gamma);
           ydata = 1:size(MAPs,1);
           imh = imagesc(axh,MAPs,'XData',xdata,'YData',ydata);
           xlabel(axh,'Approximate Wavelength [nm]')
           impixelinfo
           axh.YDir = 'normal';
           axh.YTickLabel = '';
           colorbar
           
           uih(1) = uicontrol(fgh,...
               'Style','text',...
               'Units','normalized',...
               'Position',[0.01 0.91 0.15 0.08],...
               'String','Selected Color[RGB]');
           uih(2) = uicontrol(fgh,...
               'Style','Edit',...
               'Units','normalized',...
               'Position',[0.16 0.91 0.3 0.08],...
               'String','[R*, G*, B*]');
           
           uih(3) = uicontrol(fgh,...
               'Style','text',...
               'Units','normalized',...
               'Position',[0.5 0.91 0.15 0.08],...
               'String','Input Gamma (0.1 - 2.0)');
           uih(4) = uicontrol(fgh,...
               'Style','Edit',...
               'Units','normalized',...
               'Position',[0.66 0.91 0.1 0.08],...
               'String','1');
           uih(5) = uicontrol(fgh,...
               'Style','pushbutton',...
               'Units','normalized',...
               'Position',[0.77 0.91 0.18 0.08],...
               'String','Gamma Apply',...
               'Callback',@Callback_GammaApply);
           uih(6) = uicontrol(fgh,...
               'Style','pushbutton',...
               'Units','normalized',...
               'Position',[0.77 0.01 0.18 0.08],...
               'String','Hidden Push Button',...
               'Callback','disp(''Please set up Callback'')',...
               'Visible','off');
           if nargout==1
               varargout{1} = uih;
           end
           
           function WindowButtonFcn(FigureH,MouseData)
                % WindowMouseData のプロパティ:
                %   Source: [1�?1 Figure]
                %   EventName: 'WindowMouseRelease'
               if ~strcmpi('matlab.graphics.primitive.Image',class(get(FigureH,'CurrentObject'))) 
                   return
               end
               MAPs = imh.CData;
               xdata = imh.XData;
               ydata = imh.YData;
               XYZ = get(get(FigureH,'CurrentAxes'),'CurrentPoint');
                % XYZ = [x1, y1, z1;
                %        x2, y2, z2]
               x = XYZ(1,1);
               y = XYZ(1,2);
               [~,xinn] = min(abs(xdata - x)); 
               switch ApplyColorType
                   case 'default'
                       [~,yinn] = min(abs(ydata - y)); 
                   case 'top'
                       yinn = size(MAPs,1);
                   otherwise
                       error('input value is not konwn...')        
               end
               uih(2).String = ...
                   ['[ ' num2str(squeeze(MAPs(yinn,xinn,:))','%.2f,  %.2f,  %.2f') ']'];               
               fgh.Colormap = squeeze(MAPs(:,xinn,:));
               
               uih(6).BackgroundColor = MAPs(yinn,xinn,:);
           end

           function Callback_GammaApply(~,~)
               G = eval(uih(4).String);
               if ~isnumeric(G)
                   error('Input Gamma is NOT Nummic.')                    
                end
               if or(G<0.1,G>2)
                   warning('Please Input Gamma Range is 0.1 - 2.0. Will Return.')
                   return
               end
               [MAPs,xdata] = obj.create_MAPs(Mapsize,G);
               imh.CData = MAPs;
               WindowButtonFcn(fgh,[]);
           end
        end
        
        function map = create_map(obj,mapmax,varargin)
            % map = Makemap(RGB)
            % map = Makemap(RGB,Gamma)
            % map = Makemap(RGB,Gamma,num)
            if nargin==1
                G = 1;
                num = obj.mapnum;
            elseif nargin ==2
                G = varargin{1};
                num = obj.mapnum;
            else
                G = varargin{1};
                num = varargin{2};
            end
            hsvmax = rgb2hsv(mapmax);
            hsvmatrix = repmat(hsvmax,[num,1]);
            hsvmatrix(:,3) = linspace(0,hsvmax(3),num);
            hsvmatrix(:,3) = hsvmatrix(:,3) .^G;
            map = hsv2rgb(hsvmatrix);
        end
        function [MAPs,xdata] = create_MAPs(obj,Mapsize,Gamma)
            MAPs = zeros(Mapsize,size(obj.RGBList,1),3);
            xind      = [1,   18,  70,  131];
            spectlind = [400, 440, 510, 640];
            %           purple, blue, green yellow red
            xdata = interp1(xind,spectlind,xind(1):xind(end));           
            for n = 1: size(obj.RGBList,1)
                m = obj.create_map(obj.RGBList(n,:),Gamma,Mapsize);
                m = reshape(m,[Mapsize,1,3]);
                MAPs(:,n,:) = m;
            end
        end
        
        function c = select_color(obj)
            uih = obj.SpectrumColormapEditor;
            fgh = get(uih(6),'Parent');
            set(fgh,'CloseRequestFcn',@CloseREQUEST_Color)
            set(uih(6),'Visible','on');
            set(uih(6),'String','Apply')
            set(uih(6),'Callback',@Callback_Apply)
            colorbar off
            c = [];
            function Callback_Apply(~,~)
                try
                    c = eval(get(uih(2),'String'));
                    delete(fgh)
                catch err
                    disp(err.message)
                    return;
                end
            end            
            function CloseREQUEST_Color(~,~)
                c = [];
                delete(fgh)
            end
            waitfor(fgh)
        end
        
        %% load Stack image to volume or 5
        function Image = LoadStackImage(obj,varargin)
            
            
            
            
            
            
            
            
        end
        function H = CreateInputGUI(~,NUM,varargin)
            %fgh = CreateInputGUI(NUM,VH)
            % NUM is number of input you wannt.
            % VH is Vertical or Horizontal type, 
            %
            % you need set up figure.CloseReqFunc, and Apply.Callback 
            % see. all so selectColor
            basePosi = [10 30];
            EdgePosi = [5 5];            
            if nargin == 2
                VH = 'v';
            else
                VH = varargin{1};
            end
            
            fgh = figure(...
                'Name','Input or Select Values',...
                'NumberTitle','off',...
                'Toolbar','none','Menubar','none',...
                'HandleVisibility','off',...
                'IntegerHandle','off',...
                'resize','off');
            TextPosi = zeros(NUM,4);
            UIPosi = zeros(NUM,4);
            if strcmpi(VH,'v')
                ApplyPosi = [130 5 65 30];
                Hight = 30;
                Vert = 200;
                Ratio = [2 5];
                Margin = 3;
                fghPosi = [basePosi,...
                    [Vert, NUM*Hight+ApplyPosi(3)]+2*EdgePosi];
                for n = 1:NUM
                    TextPosi(n,:) = [...
                        EdgePosi(1),...
                        EdgePosi(2)+sum(ApplyPosi([2 4]))+(n-1)*Hight + 2*Margin,...
                        Vert*Ratio(1)/sum(Ratio), Hight-Margin*2];
                    UIPosi(n,:) = [...
                        EdgePosi(1) + Vert*Ratio(1)/sum(Ratio),...
                        EdgePosi(2)+sum(ApplyPosi([2 4]))+(n-1)*Hight + 2*Margin,...
                        Vert*Ratio(2)/sum(Ratio), Hight-Margin*2];
                end
                TextPosi = flip(TextPosi,1);
                UIPosi = flip(UIPosi,1);
            elseif strcmpi(VH,'h')                                
                Hight = 80;
                Vert = 80;
                ApplyPosi = [5+(NUM-1)*Vert 5 65 30];
                Ratio = [3 4];
                Margin = 3;
                fghPosi = [basePosi,...
                    [NUM*Vert, Hight+ApplyPosi(4)]+2*EdgePosi];                
                for n = 1:NUM
                    TextPosi(n,:) = [...
                        EdgePosi(1)+(n-1)*Vert,...
                        EdgePosi(2)+sum(ApplyPosi([2 4]))-Margin+Hight*Ratio(2)/sum(Ratio),...
                        Vert, Hight*Ratio(1)/sum(Ratio)-Margin*2];
                    UIPosi(n,:) = [...
                        EdgePosi(1)+(n-1)*Vert,...
                        EdgePosi(2)+sum(ApplyPosi([2 4]))+Margin,...
                        Vert, Hight*Ratio(2)/sum(Ratio)-Margin*2];
                end
            else
                delete(fgh)
                error('input VH is not correct')
            end
            ApplyH = uicontrol(fgh,...
                'Units','Pixels',...
                'Position',ApplyPosi,...
                'String','Apply');
            for n = 1:NUM
                txh(n) = uicontrol(fgh,...
                    'Style','text',...
                    'Units','Pixels',...
                    'Position',TextPosi(n,:),...
                    'String',['Text ' num2str(n)]);              
                uih(n) = uicontrol(fgh,...
                    'Style','Edit',...
                    'Units','Pixels',...
                    'Position',UIPosi(n,:),...
                    'String',['Edit ' num2str(n)]);              
            end
            fgh.Position = fghPosi;
            centerfig(fgh)
            H.Figure = fgh;
            H.Apply = ApplyH;
            H.text = txh;
            H.uicontrol = uih;
        end
        
        
%% Segmet Editor GUI Setting up Function
        function H = create_figure_segeditor(obj,MaxChannels)
            MaxChannels = double(MaxChannels);
            % PaperPosition = [.6 .6 35 15];
            PaperPosition = [.1 .1 43.2 15.6];
            DefaultType = obj.SegEditorDefaultType;
            switch DefaultType
                case 'with Volume'
                    figurePosition = [50 30 1800 650];
                    PanelPosition = [[0 0 0.4 1];[0.4 0 0.3 1];[0.7 0  0.3 1]];
                case 'Slice only'
                    figurePosition = [50 30 1200 650];
                    PanelPosition = [[0 0 0.4 1];[0.4 0 0.6 1];[0.7 0  0.3 1]];
                otherwise
                    error('input Default Type is not able')
            end
            
            
        %% Figure, Panel, Controller
            H.figure = figure(...
                    'Name','Segment Editor(v1.5)',...
                    'InvertHardcopy','off',...
                    'PaperPositionMode','auto',...
                    'PaperPosition',PaperPosition,...
                    'Position',figurePosition,...
                    'Color','w',...
                    'Resize','on',...
                    'toolbar','figure',...
                    'menubar','none',...
                    'CloseRequestFcn',@CloseRequest);
            function CloseRequest(~,~)
                if isempty(gcbf)
                    if length(dbstack) == 1
                        warning(message('MATLAB:closereq:ObsoleteUsage'));
                    end
                    close('force');
                else
                    fprintf('#######################################\n');
                    fprintf(['   Supply For All..' obj.Editor ' \n\n Full Path:\n' obj.Name '\n\n'])
                    fprintf(['   Exit ' H.figure.Name '\n\n']);
                    delete(gcbf);
                end          
            end
            %% Menu
            H.MenuH = create_Menu_segeditor(obj,H.figure);
            %% Panels
            H.Panel(1) = uipanel(H.figure,...
                'Position',PanelPosition(1,:),...
                'Title','Segment & Point Data');
            H.Panel(2) = uipanel(H.figure,...
                'Position',PanelPosition(2,:),...
                'Title','Slice Image');
            H.Panel(3) = uipanel(H.figure,...
                'Position',PanelPosition(3,:),...
                'Title','3D viewer');
            if strcmpi(DefaultType,'Slice only')
                H.Panel(3).Visible = 'off';
            end
            
            
            for n = 1:length(H.Panel)
                H.Panel(n).BackgroundColor = [1 1 1];
            end            
        %% Panel 1  
            H = create_Panel1_segeditor(obj,H.Panel(1),MaxChannels,H);            
        %% Panel 2 
            H = create_Panel2_segeditor(obj,H.Panel(2),MaxChannels,H);
        %% Panel 3
            H = create_Panel3_segeditor(obj,H.Panel(3),H);
        
        end
        %% Panel 1 at Seg Editor
        function H = create_Panel1_segeditor(obj,PanelH,MaxChannels,H)
            ControllerA                 = [0,    0.8,  1.0,  0.2];
            SEGSelectionEditButton      = [0.01, 0.70, 0.10, 0.29];            
            SEG_DeleteButton            = [0.12, 0.70, 0.10, 0.25];
            SEG_DrawSEGPoint            = [0.23, 0.75, 0.10, 0.23];
            SEG_ImportSEGPoint          = [0.33, 0.75, 0.10, 0.23];
            SEG_ClearDrawSEGPoint       = [0.23, 0.52, 0.10, 0.23];
            SEG_CheckDrawSEGPoint       = [0.33, 0.52, 0.10, 0.23];
            SEG_ImportAsBranchPoint     = [0.23, 0.32, 0.20, 0.20];            
            SEG_InptIDEdit              = [0.2,  0.01, 0.25,  0.2 ];
            SEG_InptIDApply             = [0.45, 0.01, 0.20,  0.2 ];
            SEG_ConnectSEGPoint         = [0.47, 0.70, 0.10, 0.25];
            SEG_SeparateSEGPoint        = [0.47, 0.40, 0.10, 0.25];            
            
            SEGEditor_SortApply          = [0.02, 0.40, 0.12, 0.2];
%             SEGEditor_SortNumeric        = [0.00, 0.40, 0.12, 0.15];
            SEGEditor_SortChar          = [0.01, 0.25, 0.18, 0.15];
            SEGEditor_SortDirection     = [0.01, 0.08, 0.18, 0.15];
%             SEGEditor_SortDiameterPopup = [0.30, 0.08, 0.12, 0.15];
%             SEGEditor_SortLengthPopup   = [0.42, 0.08, 0.12, 0.15];
%             SEGEditor_SortVolumePopup   = [0.54, 0.08, 0.12, 0.15];
                                   
            SEGEditor_BranchDelete       = [0.90, 0.33, 0.08,  0.36];
            SEGEditor_BranchAddEnd       = [0.72, 0.32, 0.18,  0.2];
            SEGEditor_BranchAddFirst     = [0.72, 0.54, 0.18,  0.2];
            SEGEditor_ViewBranch         = [0.72, 0.74, 0.18,  0.25];
            SEGEditor_ApplyBranch        = [0.90, 0.74, 0.08,  0.25];
            
            SEGEditor_WriteDataButton   = [0.70, 0.01, 0.28,  0.3];
            
%             ViewSEG_Pdata = [0, 0, 1.0, 0.8];
%             TablePdata    = [0.0 0.01 0.6 .98];
%             TableXYZ      = [.61 0.01 0.39 .98];
%             
            ViewSEG_Pdata = [0, 0, 1.0, 0.8];
            TablePdata    = [0 0 1 1];
            TableXYZ      = [0 0 1 1 ];
            
            %% Main Controller
            H.ControllerA = uipanel(PanelH,...
                'Position',ControllerA,...
                'Title','Main Controller',...
                'TitlePosition','centertop',...
                'BackgroundColor',[1  .98 .9]);
            H.ControllerA.FontSize = obj.FontSize;
            
            H.SEGSelectionEditButton = uicontrol(H.ControllerA,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',SEGSelectionEditButton,...
                'String','check all');
            H.SEG_DeleteButton = uicontrol(H.ControllerA,...
                'Style','pushbutton',...
                'Units','Normalized',...
                'Position',SEG_DeleteButton,...
                'String','Delete',...
                'backgroundColor',[0.9 0.3 0.3]);
            H.SEG_DrawSEGPoint = uicontrol(H.ControllerA,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',SEG_DrawSEGPoint,...
                'String','Draw Seg.',...
                'BackgroundColor',[0.2 1 0.2]);
            H.SEG_ImportSEGPoint = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEG_ImportSEGPoint,...
                'String','Import',...
                'BackgroundColor',[0.2 1 0.2]);
            H.SEG_ClearSEGPoint = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEG_ClearDrawSEGPoint,...
                'String','Clear',...
                'BackgroundColor',[0.2 1 0.2]);
            H.SEG_CheckSEGPoint = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEG_CheckDrawSEGPoint,...
                'String','Check',...
                'BackgroundColor',[0.2 1 0.2]);
            H.SEG_ImportAsBranchPoint = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEG_ImportAsBranchPoint,...
                'String','Import As Branch',...
                'BackgroundColor',[0.2 1 0.2]);
            
            H.SEG_ConnectSEGPoint = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEG_ConnectSEGPoint,...
                'String','Connect',...
                'BackgroundColor',[1 1 0] * 0.9);
            im = imread([TS_GetPath '20_Development' filesep 'GUI' filesep 'GUI_SEGedit_Connect.png']);
            im = im.*0.8;
            H.SEG_ConnectSEGPoint.CData = imresize(im,1/2);
%             H.SEG_InptIDEdit = uicontrol(H.ControllerA,...
%                 'Style','popupmenu',...
%                 'Units','Normalized',...
%                 'Position',SEG_InptIDEdit,...
%                  'String',{'Mean','SD','Upload Current Slice'});
            H.SEG_InptIDApply = uicontrol(H.ControllerA,...
                'Style','pushbutton',...
                'Units','Normalized',...
                'Position',SEG_InptIDApply,...
                 'String','Apply[Pointdata]');
            
            H.SEG_SeparateSEGPoint = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEG_SeparateSEGPoint,...
                'String','Separate',...
                'BackgroundColor',[.5 .7 1.0]);
            im = imread([TS_GetPath '20_Development' filesep 'GUI' filesep 'GUI_SEGedit_Separate.png']);
            im = im.*0.8;
            H.SEG_SeparateSEGPoint.CData = imresize(im,1/2);
                        
            %% SEGEditor_uicontrolls
            H.SEGEditor_BranchDelete = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEGEditor_BranchDelete,...
                'String','Delete Branch',...
                'BackgroundColor',[1.0, 0.3, 0.3]);
            H.SEGEditor_BranchAddEnd = uicontrol(H.ControllerA,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',SEGEditor_BranchAddEnd,...
                'String','Appoint as End',...
                'Tag','Appoint as End',...
                'BackgroundColor',[0.2 1 0.2]);
            H.SEGEditor_BranchAddFirst = uicontrol(H.ControllerA,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',SEGEditor_BranchAddFirst,...
                'String','Appoint as First',...
                'Tag','Appoint as First',...
                'BackgroundColor',[0.2 1 0.2]);
            H.SEGEditor_ViewBranch = uicontrol(H.ControllerA,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',SEGEditor_ViewBranch,...
                'String','View Branch Point');
            H.SEGEditor_ApplyBranch = uicontrol(H.ControllerA,...
                'Style','pushbutton',...
                'Units','Normalized',...
                'Position',SEGEditor_ApplyBranch,...
                'String','Apply');
            %% Sort
            H.SEGEditor_SortApply = uicontrol(H.ControllerA,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',SEGEditor_SortApply,...
                'String','Sort off',...
                'BackgroundColor',[1 0.8 0.3]);            
%             H.SEGEditor_SortNumeric = uicontrol(H.ControllerA,...
%                 'Style','popup',...
%                 'Units','Normalized',...
%                 'Position',SEGEditor_SortNumeric,...
%                 'String',{'ID','Diameter','Length','Volume','---'},...
%                 'BackgroundColor',[1 .5 0]);
            H.SEGEditor_SortChar = uicontrol(H.ControllerA,...
                'Style','popup',...
                'Units','Normalized',...
                'Position',SEGEditor_SortChar,...
                'String',{...
                'ID';'Diameter';'Length';'Volume';'X';'Y';'Z';
                '---'
                'Class:others';...
                'Class:SA';...
                'Class:PA';...
                'Class:Cap.';
                'Class:PV';
                'Class:SV';
                'Class:Parent';
                '---';
                'Type:E2E';
                'Type:E2B';
                'Type:B2B';
                'Type:Other';
                '---'},...
                'BackgroundColor',[1 .8 .3]);
            H.SEGEditor_SortDirection = uicontrol(H.ControllerA,...
                'Style','popup',...
                'Units','Normalized',...
                'Position',SEGEditor_SortDirection,...
                'String',{'ascend','descend'},...
                'BackgroundColor',[1 .8 .3]);
%             H.SEGEditor_SortDiameterPopup  = uicontrol(H.ControllerA,...
%                 'Style','popup',...
%                 'Units','Normalized',...
%                 'Position',SEGEditor_SortDiameterPopup,...
%                 'String',{'Diameter↓ascend','Diameter�? descend'});
%             H.SEGEditor_SortLenghtPopup  = uicontrol(H.ControllerA,...
%                 'Style','popup',...
%                 'Units','Normalized',...
%                 'Position',SEGEditor_SortLengthPopup,...
%                 'String',{'Length↓ascend','Length�? descend'});
%             H.SEGEditor_SortVolumePopup  = uicontrol(H.ControllerA,...
%                 'Style','popup',...
%                 'Units','Normalized',...
%                 'Position',SEGEditor_SortVolumePopup,...
%                 'String',{'Volume↓ascend','Volume�? descend'});

            %% SEGEditor_WriteDataButton
            H.SEGEditor_WriteDataButton = uicontrol(H.ControllerA,...
                'Style','PushButton',...
                'Units','Normalized',...
                'Position',SEGEditor_WriteDataButton,...
                'String','Write Data to WS',...
                'BackgroundColor',[0 0 0],...
                'ForegroundColor',[1 1 1],...
                'FontWeight','bold');
            
            
            %% SEGMENT TABLE
            H.ViewSEG_Pdata = uipanel(PanelH,...
                'Position',ViewSEG_Pdata,...
                'Title','SEG to Point data',...
                'TitlePosition','lefttop',...
                'BackgroundColor',[1  1 1],...
                'Visible','on');
            
           
            
            ColumnName_Pointdata = {'Edit',...
                                    'Select',...
                                    'ID',...
                                    'Class',...
                                    'Diameter',...
                                    'Length',...
                                    'Volume',...
                                    'Type',...
                                    'X',...
                                    'Y',...
                                    'Z',...
                                    'MEMO'};
            ColumnFormat_Pointdata = {'logical',...
                                      'logical',...
                                      'numeric',...
                                      {'others' 'Art.' 'SA' 'PA' 'Cap.' 'PV' 'SV' 'Vein'  'Parent'},...
                                      'numeric',...
                                      'numeric',...
                                      'numeric',...
                                      {'E2E' 'E2B' 'B2B' 'Other'},...
                                      'numeric',...
                                      'numeric',...
                                      'numeric',...
                                      'char'};
            ColumnWidth_Pointdata = {35 35 50 70 40 40 40 60 30 30 50 200};
            H.Table_Pdata = uitable('Parent',H.ViewSEG_Pdata,...
                'Unit','Normalized',....
                'Position',TablePdata,...
                'ColumnName',ColumnName_Pointdata,...
                'ColumnFormat',ColumnFormat_Pointdata,...
                'ColumnEditable',true,...
                'ColumnWidth',ColumnWidth_Pointdata,...
                'RowName',[],...
                'CellSelectionCallback','disp(''please set up@CellSelectionCallback '')',...
                'BusyAction','cancel',...    
                'Enable','on',...
                'CellEditCallback','disp(''please set up@CellEditCallback '')',...
                'FontSize',obj.FontSize-1);   
            H.Table_XYZ = uitable('Parent',H.ViewSEG_Pdata,...
                'Unit','Normalized',....
                'Position',TableXYZ,...
                'ColumnName',{'Select','X','Y','Z','Branch','Diameter','Signal','Noise','SNR',},...
                'ColumnFormat',{'logical','numeric','numeric','numeric','logical','numeric','numeric','numeric','numeric'},...
                'ColumnEditable',true,...
                'ColumnWidth',{35 40 40 40 35 40 40 40 40 },...
                'CellSelectionCallback','disp(''please set up@CellSelectionCallback '')',...
                'BusyAction','cancel',...    
                'Enable','on',...
                'CellEditCallback','disp(''please set up@CellEditCallback '')',...
                'FontSize',obj.FontSize-1);
            
            %% Branch Table
            H.BranchTable_XYZ = uitable('Parent',H.ViewSEG_Pdata,...
                'Unit','Normalized',....
                'Position',TableXYZ,...
                'ColumnName',{'Select','X','Y','Z','MEMO'},...
                'ColumnFormat',{'logical','numeric','numeric','numeric','char'},...
                'ColumnEditable',true,...
                'ColumnWidth',{35 50 50 50 200},...
                'CellSelectionCallback','disp(''please set up@CellSelectionCallback '')',...
                'BusyAction','cancel',...    
                'Enable','on',...
                'CellEditCallback','disp(''please set up@CellEditCallback '')',...
                'FontSize',obj.FontSize-1,...
                'Visible','on');
            H.ViewSEG_TabGroup = uitabgroup(H.ViewSEG_Pdata);
            H.Tab_Pointdata = uitab(H.ViewSEG_TabGroup,'Title','Pointdata');
            H.Tab_PointXYZ = uitab(H.ViewSEG_TabGroup,'Title','PointXYZ');
            H.Tab_BranchPoint = uitab(H.ViewSEG_TabGroup,'Title','BranchPoint');
            H.Table_Pdata.Parent = H.Tab_Pointdata;
            H.Table_XYZ.Parent = H.Tab_PointXYZ;
            H.BranchTable_XYZ.Parent = H.Tab_BranchPoint;
            %% For Tracker
            ColumnName = {'Select'};
            ColumnFormat = {'logical'};
            ColumnWidth = {45};
            for n = 1:MaxChannels
                ColumnName = [ColumnName, {['#' num2str(n)]}];
                ColumnFormat = [ColumnFormat, {'numeric'}];
                ColumnWidth = [ColumnWidth, {50}];
            end
            ColumnName = [ColumnName, {'Edit', 'Memo'}];
            ColumnFormat = [ColumnFormat, {'logical','char'}];
            ColumnWidth = [ColumnWidth, {30, 200}];
            
            H.Table_Tracking = uitable('Parent',H.ViewSEG_Pdata,...
                'Unit','Normalized',....
                'Position',TableXYZ,...
                'ColumnName',ColumnName,...
                'ColumnFormat',ColumnFormat,...
                'ColumnEditable',true,...
                'ColumnWidth',ColumnWidth,...
                'CellSelectionCallback','disp(''please set up@CellSelectionCallback '')',...
                'BusyAction','cancel',...    
                'Enable','on',...
                'CellEditCallback','disp(''please set up@CellEditCallback '')',...
                'FontSize',obj.FontSize-1,...
                'Visible','off');
        end
        %% Panel 2 at Seg Editor
        function H = create_Panel2_segeditor(obj,PanelH,MaxChannels,H)            
            ControllerB = [0, 0.8, 1.0, 0.2];
                ChannelsPosition = [0.67 0.01 .3 0.95];
                SliceAxes = [0 0 1 .75];
                SliceSlider = [3 20 200 20];
                SliceSliderText = [210 20 150 20];
                TimeSlider = [3 0 200 20];
                TimeSliderText = [210 0 150 20];
                ProjectionMenu = [0.01 0.38 0.65 0.6];
                
            H.ControllerB = uipanel(PanelH,...
                'Position',ControllerB,...
                'Title','Slice Viewer Controller',...
                'TitlePosition','centertop',...
                'BackgroundColor',[.9  1 .9]);
            H.ControllerB.FontSize = obj.FontSize;            
            H.Axes(1) = axes(PanelH,...
                'Unit','Normalized',...
                'Position',SliceAxes);
            grid(H.Axes,'on')
            hold(H.Axes,'on')

            H.Slider(1) = uicontrol(H.ControllerB,...
                'Style','slider',...
                'BackgroundColor',[0.5 0.5 0.5],...
                'Position',SliceSlider);
            H.SliderText(1) = uicontrol(H.ControllerB,...
                'Style','text',...
                'Position',SliceSliderText,...
                'String','SliceSliderText',...
                'BackgroundColor',H.ControllerB.BackgroundColor);

            H.Slider(2) = uicontrol(H.ControllerB,...
                'Style','slider',...
                'BackgroundColor',[0.9 0.9 0.9],...
                'Position',TimeSlider);
            H.SliderText(2) = uicontrol(H.ControllerB,...
                'Style','text',...
                'Position',TimeSliderText,...
                'String','TimeSliderText',...
                'BackgroundColor',H.ControllerB.BackgroundColor);
            H.SliceViewerChannelsPanel = uipanel(H.ControllerB,...
                'Position',ChannelsPosition,...
                'Title','Channels',...
                'TitlePosition','CenterTop',...
                'BackgroundColor',H.ControllerB.BackgroundColor);
            H = obj.create_ChannelsPanel(H.SliceViewerChannelsPanel,MaxChannels,H);
            for n = 1:MaxChannels
                H.ChannelsChoise(n).BackgroundColor = H.ControllerB.BackgroundColor;
            end
            [H.ProjectionH,ch] = obj.AddMIPPanel(H.ControllerB);
            H.ProjectionH.Position = ProjectionMenu;
            H.ProjectionH.FontSize = obj.FontSize - 1;
            for n = [5 6 7]
                ch(n).FontSize = obj.FontSize - 1; 
            end
            H.SliceViewerApply = ch(4);
           
        end
        function H = create_ChannelsPanel(obj,ParentH,MaxChannels,H)
            Hight = 1 /(MaxChannels/2) - 0.01;
            for n = 1:MaxChannels
                X = double((ceil(n/2)==floor(n/2)));
                H.ChannelsChoise(n) = uicontrol(ParentH,...
                    'Style','checkbox',...
                    'Units','Normalized',...
                    'Position',[0+X*0.5 1-Hight*(ceil(n/2)) 0.2 Hight],...
                    'String',['#' num2str(n)]);
                H.ChannelsEditPush(n) = uicontrol(ParentH,...
                    'Units','Normalized',...
                    'Position',[0.2+X*0.5 1-Hight*(ceil(n/2)) 0.15 Hight],...
                    'BackgroundColor',[0 0 0]);
            end            
        end
        
        %% Panel 3 at Seg Editor
        function H = create_Panel3_segeditor(obj,PanelH,H) 
            ControllerC               = [0,    0.8,  1.0,   0.2];
            RangeApplyFromSliceViewer = [0.01,  0.6,  0.48,  0.28];
            View3_XLimEdit            = [0.01,  0.3,  0.13,  0.25];
            View3_YLimEdit            = [0.14,  0.3,  0.13,  0.25];
            View3_ZLimEdit            = [0.27,  0.3,  0.13,  0.25];
            View3_XYZLimApply         = [0.40,  0.3,  0.1, 0.28];
            View3_XYZLimApply_FontSize= 8;
            SEGview_textONOFF         = [0.01,  0.05,  0.2,  0.2];
            SEGview_BranchONOFF       = [0.26,  0.05,  0.2,  0.2];
            
            RenderingPanel            = [0.51,  0.0,  0.25,   0.9];
            RenderingResetup          = [0.0,  0.6,  1.0,   0.4];
            RenderingAlphaEdit        = [0.0,  0.4,  0.3,   0.2];
            RenderingAlphaApply       = [0.3,  0.4,  0.7,   0.2];
            RenderingFaceColorEdit    = [0.0,  0.2,  0.5,   0.2];
            RenderingFaceColorApply   = [0.5,  0.2,  0.5,   0.2];
            RenderingThresholdEdit    = [0.6,  0.0,  0.4,   0.2];
            RenderingThresholdApply   = [0.0,  0.0,  0.6,   0.2];
%             RenderingDataSetPopup     = [0.01, 0.0,  0.98,  0.2];
            %%
            ViewPanel = [0, 0, 1.0, 0.8];            
            View3Axes = [.1 .1 .8 .8];
            H.ControllerC = uipanel(PanelH,...
                'Position',ControllerC,...
                'BorderType','none',...
                'BackgroundColor',[.9  .9 1]);
%                 'Title','3D Viewer Controller',...
%                 'TitlePosition','centertop',...
                
            H.ControllerC.FontSize = obj.FontSize;
            H.RenderingRangeApply = uicontrol(H.ControllerC,...
                'Style','togglebutton',...
                'Units','Normalized',...
                'Position',RangeApplyFromSliceViewer,...
                'String','Set Axis Lim. from Slice Viewer');
            H.View3_XLimEdit = uicontrol(H.ControllerC,...
                'Style','Edit',...
                'Units','Normalized',...
                'Position',View3_XLimEdit,...
                'String','[#,  #]',...
                'FontSize',obj.FontSize); 
            H.View3_YLimEdit = uicontrol(H.ControllerC,...
                'Style','Edit',...
                'Units','Normalized',...
                'Position',View3_YLimEdit,...
                'String','[#,  #]',...
                'FontSize',obj.FontSize); 
            H.View3_ZLimEdit = uicontrol(H.ControllerC,...
                'Style','Edit',...
                'Units','Normalized',...
                'Position',View3_ZLimEdit,...
                'String','[#,  #]',...
                'FontSize',obj.FontSize); 
            H.View3_XYZLimApply = uicontrol(H.ControllerC,...
                'Units','Normalized',...
                'Position',View3_XYZLimApply,...
                'String',{'Set Lim.'},...
                'FontSize',View3_XYZLimApply_FontSize); 
            
            
            H.SEGview_textONOFF = uicontrol(H.ControllerC,...
                'Style','checkbox',...
                'Units','Normalized',...
                'Position',SEGview_textONOFF,...
                'String','SEG text',...
                'value',1,...
                'BackgroundColor',H.ControllerC.BackgroundColor);
            H.SEGview_BranchONOFF = uicontrol(H.ControllerC,...
                'Style','checkbox',...
                'Units','Normalized',...
                'Position',SEGview_BranchONOFF,...
                'String','Branch',...
                'value',0,...
                'BackgroundColor',H.ControllerC.BackgroundColor);
            %% Rendering Menu
            H.Rendering = uipanel(H.ControllerC,...
                'Position',RenderingPanel,...
                'Title','Rendering Menu',...
                'TitlePosition','centertop',...
                'BackgroundColor',H.ControllerC.BackgroundColor);
                
            H.RenderingResetup = uicontrol(H.Rendering,...
                'Units','Normalized',...
                'Position',RenderingResetup,...
                'String','Re-set up(isosurface)',...
                'FontSize',obj.FontSize * 1.2,...
                'BackgroundColor',[0.9, 1, 1]);
            H.RenderingAlphaEdit = uicontrol(H.Rendering,...
                'Style','Edit',...
                'Units','Normalized',...
                'Position',RenderingAlphaEdit,...
                'String','#');
            H.RenderingAlphaApply = uicontrol(H.Rendering,...
                'Units','Normalized',...
                'Position',RenderingAlphaApply,...
                'String','Set Alpha',...
                'BackgroundColor',H.Rendering.BackgroundColor);
            H.RenderingFaceColorEdit = uicontrol(H.Rendering,...
                'Style','Edit',...
                'Units','Normalized',...
                'Position',RenderingFaceColorEdit,...
                'String','[#, #, #]');
            H.RenderingFaceColorApply = uicontrol(H.Rendering,...
                'Units','Normalized',...
                'Position',RenderingFaceColorApply,...
                'String','Set Color',...
                'BackgroundColor',H.Rendering.BackgroundColor);
            H.RenderingThresholdEdit = uicontrol(H.Rendering,...
                'Style','Edit',...
                'Units','Normalized',...
                'Position',RenderingThresholdEdit,...
                'String','#');
            H.RenderingThresholdApply = uicontrol(H.Rendering,...
                'Style','text',...
                'Units','Normalized',...
                'Position',RenderingThresholdApply,...
                'String','Threshold',...
                'BackgroundColor',H.Rendering.BackgroundColor);
%             H.RenderingDataSetPopup = uicontrol(H.Rendering,...
%                 'Style','popup',...
%                 'Units','Normalized',...
%                 'Position',RenderingDataSetPopup,...
%                 'String',{'Original'});            
            %%
            H.View3DPanel = uipanel(PanelH,...
                'Position',ViewPanel,...
                'BackgroundColor',[1 1 1]);
            H.View3DAxes = axes(H.View3DPanel,...
                'Position',View3Axes,...
                'YDir','reverse');
            hold(H.View3DAxes,'on')
            xlabel('X - axis')
            ylabel('Y - axis')
            zlabel('Z - axis')    
        end
        
        function H = create_Controller_Traker(obj,ParentH,H)
            ControllerPosi = [0 0 0.4 1];
            HightNum = 18;
            Margin = .01;
            Hight = 1/HightNum;
            
            textViewOutput   = [0.00  1-Hight*1   0.40  Hight- Margin];
            ViewOutput       = [0.50  1-Hight*1   0.40  Hight- Margin];
            
            textPaddingPre   = [0.00  1-Hight*2   0.40  Hight- Margin];
            PaddingPreValue  = [0.40  1-Hight*2   0.20  Hight- Margin];
            PaddingPreXYZ    = [0.60  1-Hight*2   0.40  Hight- Margin];
            
            textPaddingPost  = [0.00  1-Hight*3   0.40  Hight- Margin];
            PaddingPostValue = [0.40  1-Hight*3   0.20  Hight- Margin];
            PaddingPostXYZ   = [0.60  1-Hight*3   0.40  Hight- Margin];
            
            textRotate       = [0.00  1-Hight*4   1.00  Hight- Margin];
            textRotateStep   = [0.00  1-Hight*5   0.40  Hight- Margin];
            RotateStep       = [0.40  1-Hight*5   0.40  Hight- Margin];
            ApplyRotateStep  = [0.80  1-Hight*5   0.20  Hight- Margin];
            textRotateRho    = [0.00  1-Hight*6   0.40  Hight- Margin];
            RotateRho        = [0.40  1-Hight*6   0.60  Hight- Margin];
            textRotateYaw    = [0.00  1-Hight*7   0.40  Hight- Margin];
            RotateYaw        = [0.40  1-Hight*7   0.60  Hight- Margin];
            textRotatePitch  = [0.00  1-Hight*8   0.40  Hight- Margin];
            RotatePitch      = [0.40  1-Hight*8   0.60  Hight- Margin];
            
            textShiftSize    = [0.00  1-Hight*12   1.00  Hight*4- Margin];
            tongleShiftX     = [0.00      0.5  0.15  0.5];
            EditShiftX       = [0.15      0.5  0.17  0.5];
            tongleShiftY     = [1/3       0.5  0.15  0.5];
            EditShiftY       = [1/3+0.15  0.5  0.17  0.5];
            tongleShiftZ     = [2/3       0.5  0.15  0.5];
            EditShiftZ       = [2/3+0.15  0.5  0.17  0.5];
            ButtonShift       = [0.00   0.0  0.25  0.5];
            ButtonShift = repmat(ButtonShift,[4 1]);
            ButtonShift(2,1) = 0.25;
            ButtonShift(3,1) = 0.50;
            ButtonShift(4,1) = 0.75;
            
            MIPViewPanel     = [0.00  0.00   1.00  Hight*6- Margin];
            EditMIPRange     = [0.00  0.00   0.30  0.30];
            PopupMIPDim      = [0.30  0.00   0.30  0.30];
            PushApplyView    = [0.60  0.00   0.40  0.30];
            
            %% Controller Panel
            Ph = uipanel(ParentH,...
                'Title','Controller: 3D Rotate & Shift',...
                'Position',ControllerPosi,...
                'FontSize',obj.FontSize);
            H.Tracker3DReplaceController = Ph;
            %% View Output Size
            H.textViewOutput = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Output Size [voxels] :',...
                'Position',textViewOutput);
            H.ViewOutput = uicontrol(Ph,...
                'Style','Edit',....
                'String','[256,   256,   256]',...
                'Units','Normalized',...
                'Position',ViewOutput);
            %% Padding Menu
            H.textBasePaddingPre = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Padding Pre :',...
                'Position',textPaddingPre);
            H.BasePaddingPreValue = uicontrol(Ph,...
                'Style','popup',....
                'String',{'NaN' '0'},...
                'Units','Normalized',...
                'Position',PaddingPreValue);
            H.BasePaddingPreXYZ = uicontrol(Ph,...
                'Style','Edit',....
                'String','[0.0,   0.0,   0.0]',...
                'Units','Normalized',...
                'Position',PaddingPreXYZ);
            
            H.textBasePaddingPost = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Padding Post:',...
                'Position',textPaddingPost);
            H.BasePaddingPostValue = uicontrol(Ph,...
                'Style','popup',....
                'String',{'NaN' '0'},...
                'Units','Normalized',...
                'Position',PaddingPostValue);
            H.BasePaddingPostXYZ = uicontrol(Ph,...
                'Style','Edit',....
                'String','[0.0,   0.0,   0.0]',...
                'Units','Normalized',...
                'Position',PaddingPostXYZ);            
            %% Rotate
            f = @(x) (x-0.5)*360;
            StepSize = [1/360 1/36];
            H.textRotate = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','########## Rotate [0 - 360] ##########',...
                'Position',textRotate);
            H.textRotateStep = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Rotate Step size:',...
                'Position',textRotateStep);
            H.RotateStep = uicontrol(Ph,...
                'Style','Edit',...
                'Units','Normalized',...
                'String','[1, 10]',...
                'Position',RotateStep);
            H.ApplyRotateStep = uicontrol(Ph,...
                'Style','pushbutton',...
                'Units','Normalized',...
                'String','Apply',...
                'Position',ApplyRotateStep);
            H.textRotateRho = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Rotate Rho   0.00',...
                'Position',textRotateRho);
            H.RotateRho = uicontrol(Ph,...
                'Style','Slider',...
                'Units','Normalized',...
                'SliderStep',StepSize,...
                'Value',0.5,...
                'Position',RotateRho,...
                'UserData',f);
            H.textRotateYaw = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Rotate Yaw   0.00',...
                'Position',textRotateYaw);
            H.RotateYaw = uicontrol(Ph,...
                'Style','Slider',...
                'Units','Normalized',...
                'SliderStep',StepSize,...
                'Value',0.5,...
                'Position',RotateYaw,...
                'UserData',f);
            H.textRotatePitch = uicontrol(Ph,...
                'Style','text',...
                'Units','Normalized',...
                'String','Rotate Pitch   0.00',...
                'Position',textRotatePitch);
            H.RotatePitch = uicontrol(Ph,...
                'Style','Slider',...
                'Units','Normalized',...
                'SliderStep',StepSize,...
                'Value',0.5,...
                'Position',RotatePitch,...
                'UserData',f);
            %% Shift Size
             uih = uibuttongroup(Ph,...
                'Units','Normalized',...
                'Title','########## Shift Size [um] ##########',...
                'Position',textShiftSize);
            H.textShiftSize = uih;
            H.tongleShiftX = uicontrol(uih,...
                'Style','radiobutton',....
                'String','X:',...
                'Units','Normalized',...
                'Position',tongleShiftX);
            H.EditShiftX = uicontrol(uih,...
                'Style','Edit',....
                'String','0',...
                'Units','Normalized',...
                'Position',EditShiftX);
            H.tongleShiftY = uicontrol(uih,...
                'Style','radiobutton',....
                'String','Y:',...
                'Units','Normalized',...
                'Position',tongleShiftY);
            H.EditShiftY = uicontrol(uih,...
                'Style','Edit',....
                'String','0',...
                'Units','Normalized',...
                'Position',EditShiftY);
            H.tongleShiftZ = uicontrol(uih,...
                'Style','radiobutton',....
                'String','Z:',...
                'Units','Normalized',...
                'Position',tongleShiftZ);
            H.EditShiftZ = uicontrol(uih,...
                'Style','Edit',....
                'String','0',...
                'Units','Normalized',...
                'Position',EditShiftZ);
            STR = {'+1.0um' '+0.1um' '-1.0um' '-0.1um'};
            for n =1:4
                H.ButtonShift(n) = uicontrol(uih,...
                    'Units','Normalized',...
                    'Position',ButtonShift(n,:),...
                    'String',STR{n});
            end
            %% MIP Videw Panel
            H.MIPViewPanel = uipanel(Ph,...
                'Title','View Controller',...
                'Units','Normalized',...
                'Position',MIPViewPanel);
            H.EditMIPRange = uicontrol(H.MIPViewPanel,...
                'Style','Edit',....
                'Units','Normalized',...
                'Position',EditMIPRange,...
                'String','[0, 1]');
            H.PopupMIP = uicontrol(H.MIPViewPanel,...
                'Style','Popup',....
                'Units','Normalized',...
                'Position',PopupMIPDim,...
                'String',{'1' '2' '3'},...
                'Value',3);
            H.PUshApplyMIP = uicontrol(H.MIPViewPanel,...
                'Style','pushbutton',....
                'Units','Normalized',...
                'Position',PushApplyView,...
                'String','View Apply');                        
        end
        
        %% Editors Memo Table and figure
        function fgh = SetupEditorsMemo(obj,GUIname,UserName)
            PathName = obj.Name;
            p = PathName == filesep;
            p = find(p);
            LoadName = [PathName(1:p(end)-1) filesep GUIname '_' UserName];
            try
                load(LoadName)
            catch err
                fprintf(err.message)
                fprintf(['\n   Create New Data for ' UserName '.\n'])
                Data = cell(10,2);
            end
            fgh = findobj('Tag',GUIname);
            if ishandle(fgh)
                return
            end
                
            fgh = figure('Name',['Development tool: ' GUIname ],...
                'Menubar','none','Toolbar','none',...
                'Tag',GUIname,...
                'UserData',LoadName,...
                'closerequestfcn',@CloseReqFnc);
            function CloseReqFnc(~,~)
                Data = uih.Data;
                save(fgh.UserData,'Data')
                delete(fgh)
            end  
            uih = uitable('Parent',fgh,...
                'Unit','Normalized',....
                'Position',[0 0 1 1],...
                'ColumnName',{'Select' 'MEMO'},...
                'ColumnFormat',{'logical','char'},...
                'ColumnEditable',true,...
                'ColumnWidth',{40 480},...    
                'BusyAction','cancel',...    
                'Enable','on',...
                'FontSize',obj.FontSize-1);
            for n = 1:size(Data,1)
                if isempty(Data{n,1})
                    Data{n,1} = false;
                end
            end
            uih.Data = Data;
            
            Menu_Table = uimenu(fgh,'Label','Table');
            uimenu(Menu_Table,'Label','Add New Row','Callback',@Callback_RowAdd)
            uimenu(Menu_Table,'Label','Delete Selected','Callback',@Callback_Delete)
            uimenu(Menu_Table,'Label','Select All','Callback',@Callback_CheckOn)
            uimenu(Menu_Table,'Label','Off All','Callback',@Callback_CheckOff)
            function Callback_RowAdd(~,~)
                uih.Data = cat(1,uih.Data,cell(1,size(uih.Data,2)));
                uih.Data{end,1} = false;
            end
            function Callback_Delete(~,~)                
                Ind = cell2mat(uih.Data(:,1));
                uih.Data(Ind,:) = [];
            end
            function Callback_CheckOff(~,~)
                for n = 1:size(uih.Data,1)
                    uih.Data{n,1} = false;
                end
            end
            function Callback_CheckOn(~,~)
                for n = 1:size(uih.Data,1)
                    uih.Data{n,1} = true;
                end
            end
            
            
        end
        
        %% Menu 
        function H = create_Menu_segeditor(obj,fgh)
            H.File = uimenu(fgh,'Label','File');
%             H.Data = uimenu(fgh,'Label','Data');
            H.View = uimenu(fgh,'Label','View');
            H.View_withVolume = uimenu(H.View,'Label','with Volume');
            H.View_SliceOnly = uimenu(H.View,'Label','Slice only');
            H.Edit = uimenu(fgh,'Label','Edit');
            
            H.Panel1 = uimenu(fgh,'Label','Panel 1');
            H.Panel1_SegmentDensity_Depth = uimenu(H.Panel1,'Label','check Density in Depth');
            H.Panel1_SegmentDensity_Type = uimenu(H.Panel1,'Label','check Density in Type');
            H.Panel1_InputSelect = uimenu(H.Panel1,'Label','Input "Select"','Separator','on');
            H.Panel1_InputEdit = uimenu(H.Panel1,'Label','Input "Edit"');
            
            H.Panel2 = uimenu(fgh,'Label','Panel 2');
            H.Panel2_SegSelectionApply = uimenu(H.Panel2,...
                'Label','Apply Slider for Selected Segment.',...
                'Checked','on');
            H.Panel2_SegSelectionVisible = uimenu(H.Panel2,...
                'Label','Selected Segment Visible');
            H.Panel2_SegSelectionVisible_ON = uimenu(H.Panel2_SegSelectionVisible,...
                'Label','ON');
            H.Panel2_SegSelectionVisible_OFF = uimenu(H.Panel2_SegSelectionVisible,...
                'Label','OFF');
            
            H.Panel3 = uimenu(fgh,'Label','Panel 3');
            H.Panel3_AxesProjection = uimenu(H.Panel3,...
                'Label','3D-Axes Projection');
            H.Panel3_AxesProjection_orthographic = uimenu(H.Panel3_AxesProjection,...
                'Label','Orthographic');
            H.Panel3_AxesProjection_perspective = uimenu(H.Panel3_AxesProjection,...
                'Label','Perspective');
            H.Panel3_CheckBeardInView = uimenu(H.Panel3,...
                'Label','Check Beard in View');
            
            
            H.Sample = uimenu(fgh,'Label','Sample');
                ch = uimenu(H.Sample,'Label','Edit as Developer','Callback',@Helloworld);
            function Helloworld(dummy1,dummy2)
                disp('   Hello world,');
                why
            end
        end
       
        %% %%%%%%%%%%%%%% Others %%%%%%%%%%%%%%%%%%
        function H = MesureLine(obj,axh,Reso)
            H = [];
            error('This function will open soon!!!!')
            
        end
        
        
   end
end

function A = GetAllColorAsRGB
A = [...
%     0.12553           0     0.38385
% 0.13888           0     0.41758
% 0.15268           0     0.45266
% 0.16696           0     0.48899
% 0.18152           0     0.52647
% 0.19647           0     0.56498
% 0.2116           0     0.60443
% 0.22683           0     0.64465
% 0.24215           0     0.68549
% 0.25742           0     0.72675
% 0.27252           0     0.76828
% 0.28728           0     0.80963
% 0.30153           0     0.85043
% 0.31525           0     0.89056
% 0.32838           0     0.92997
% 0.34091           0     0.96861
% 0.35283           0           1
% 0.36414           0           1
% 0.37485           0           1
% 0.385           0           1
% 0.39461           0           1
% 0.40333           0           1
% 0.41094           0           1
% 0.41738           0           1
% 0.42276           0           1
% 0.42722           0           1
% 0.43075           0           1
% 0.43357           0           1
% 0.43573           0           1
% 0.43731           0           1
% 0.4385           0           1
% 0.43919           0           1
0.43923           0           1
0.43858           0           1
0.4371           0           1
0.43466           0           1
0.43138           0           1
0.42693           0           1
0.42128           0           1
0.41432           0           1
0.40587           0           1
0.39608           0           1
0.3851           0           1
0.3728           0           1
0.35893           0           1
0.34328           0           1
0.32538           0           1
0.30482           0           1
0.28074           0           1
% 0.25202           0           1
% 0.21624           0           1
% 0.1713           0           1
% 0.10957           0           1
% 0  0  1
0    0.087486           1
0     0.17651           1
0     0.23076           1
0     0.27295           1
0     0.30928           1
0     0.34246           1
0     0.37392           1
0     0.40439           1
0     0.43423           1
0     0.46378           1
0     0.49284           1
0     0.51993           1
0     0.54449           1
0     0.56694           1
0     0.58755           1
0     0.60667           1
0     0.62455           1
0     0.64145           1
0     0.65772           1
0     0.67358           1
0     0.68936           1
0     0.70538     0.98626
0      0.7215     0.95797
0      0.7373     0.92969
0      0.7525     0.90153
0     0.76693     0.87359
0     0.78049     0.84597
0     0.79312     0.81876
0     0.80481       0.792
0     0.81559     0.76578
0     0.82549     0.74012
0     0.83599     0.71495
0     0.84799     0.68994
0     0.86086      0.6648
0     0.87413     0.63943
0     0.88742     0.61378
0     0.90047     0.58791
0      0.9131     0.56199
0     0.92524     0.53621
0     0.93692     0.51094
0     0.94838     0.48668
0     0.95975     0.46268
0     0.97097     0.43772
0     0.98204     0.41155
0     0.99295     0.38397
0           1     0.35469
0           1     0.32328
0           1     0.28922
0           1     0.25156
0           1     0.20867
0           1     0.15701
0           1    0.084726
0  1  0
0.070549           1           0
0.25868           1           0
0.35581           1           0
0.42987           1           0
0.49208           1           0
0.54682           1           0
0.59625           1           0
0.64169           1           0
0.68392           1           0
0.7235           1           0
0.76077           1           0
0.79599           1           0
0.82972           1           0
0.86238           1           0
0.894           1           0
0.92461           1           0
0.9542           1           0
0.98277           1           0
1  1  0
1     0.99958           0
1     0.98719           0
1     0.97431           0
1     0.96087           0
1     0.94691           0
1     0.93247           0
1     0.91764           0
1     0.90244           0
1     0.88695           0
1     0.87121           0
1      0.8553           0
1     0.83924           0
1     0.82303           0
1     0.80656           0
1     0.78979           0
1      0.7727           0
1     0.75518           0
1     0.73732           0
1       0.719           0
1     0.70024           0
1     0.68101           0
1     0.66138           0
1     0.64127           0
1     0.62077           0
1     0.59981           0
1     0.57841           0
1     0.55655           0
1     0.53416           0
1     0.51123           0
1     0.48769           0
1     0.46344           0
1     0.43845           0
1     0.41263           0
1     0.38586           0
1       0.358           0
1     0.32871           0
1     0.29758           0
1     0.26396           0
1     0.22674           0
1      0.1838           0
1     0.12989           0
1    0.040256           0];
end

function GpuObj = GetGPUDevice
try
    GpuObj = gpuDevice;
catch 
    GpuObj = [];
end
end














